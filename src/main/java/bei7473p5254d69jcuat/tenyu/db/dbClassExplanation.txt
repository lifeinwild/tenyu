UserやWeb等DBに記録されるクラスは永続化クラスと呼ぶ。
永続化クラスはバージョンアップされる可能性があるが、
P2Pなのでノードによって古いクラスのままである可能性があり、
さらに長時間の更新処理が発生するとエンドユーザーに嫌われるので、
スキーマエボリューションは絶望的に難しい。
そこで、chainversionupというスキーマエボリューション回避の方法を発明した。
使用するデータのみを過去の任意のバージョンから最新版へ随時更新する。

クラス定義を勝手に変えれない。
古いクラスのシリアライズされたデータは、
シリアライズされた時点のそのクラス定義でデシリアライズされる必要がある。
この問題はrelease番号をパッケージ名に含めている事とchainversionupで解決される。

永続化クラスの親クラスをどうバージョンアップするか？
子クラスが変化せず親クラスだけが変化する場合、
親クラスだけ新しい定義を用意しても意味が無い。
子クラスのデシリアライズはそれを無視して古い親クラスを使用するから。
だから、子クラスも連れだって新しい定義が用意される必要がある。
子クラスの内容が少しも変わっていなくても。
親クラスの更新は更新するファイル数が増えるものの、
作業自体は現実的な範囲だろう。

永続化クラスはそのクラスに応じたストアクラスを持つ。UserStore,WebStore等。
UserIやWebIなどIは主に永続化クラスをDBに記録する時にストアクラスが利用するインターフェースが定義され、
主に周辺のインデックスの作成や整合性の保証のために利用される。
ストアクラスはDBの読み書きに用いるクラス。
IdObjectIやUserIなどのインターフェースはもともとDBI（モデルとDB間のインターフェースを意味したもの）
と呼んでいたが、現在では単にモデルの長期的に約束される全インターフェースが記述され、
DBIからIに置換された。
